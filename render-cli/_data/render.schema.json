{
  "$comment": "DO NOT EDIT THIS FILE MANUALLY. IT IS GENERATED BY RUNNING `npm run generate`.",
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "http://render.com/schemas/renderSchema.json",
  "type": "object",
  "title": "render.yaml schema",
  "description": "The root schema comprises the entire JSON document.",
  "default": {},
  "additionalProperties": false,
  "properties": {
    "previewsEnabled": {
      "$comment": "Is this deprecated? It is not mentioned in docs.",
      "type": "boolean"
    },
    "previewsExpireAfterDays": {
      "$comment": "Is this deprecated? It is not mentioned in docs.",
      "type": "number"
    },
    "services": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "$id": "subschemas/services.json",
      "type": "array",
      "title": "The services schema",
      "description": "An explanation about the purpose of this instance.",
      "default": [],
      "items": {
        "$id": "#/properties/services/items",
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "web",
              "worker",
              "pserv",
              "cron",
              "redis"
            ]
          },
          "name": {
            "type": "string"
          },
          "env": {
            "type": "string",
            "enum": [
              "docker",
              "elixir",
              "go",
              "node",
              "python",
              "ruby",
              "rust",
              "static"
            ]
          },
          "repo": {
            "type": "string"
          },
          "autoDeploy": {
            "type": "boolean"
          },
          "branch": {
            "type": "string"
          },
          "buildCommand": {
            "type": "string"
          },
          "initialDeployHook": {
            "type": "string"
          },
          "region": {
            "type": "string",
            "default": "oregon",
            "enum": [
              "frankfurt",
              "oregon",
              "ohio",
              "singapore"
            ]
          },
          "envVars": {
            "$schema": "http://json-schema.org/draft-07/schema",
            "$id": "subschemas/envVars.json",
            "type": "array",
            "title": "The envVars schema",
            "description": "An explanation about the purpose of this instance.",
            "default": [],
            "items": {
              "$id": "#/properties/envVars/items",
              "anyOf": [
                {
                  "$id": "#/properties/envVars/items/anyOf/0",
                  "type": "object",
                  "examples": [
                    {
                      "key": "A",
                      "value": "B"
                    }
                  ],
                  "required": [
                    "key",
                    "value"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$id": "#/properties/envVars/items/anyOf/0/properties/key",
                      "type": "string"
                    },
                    "value": {
                      "$id": "#/properties/envVars/items/anyOf/0/properties/value"
                    },
                    "previewValue": {
                      "$id": "#/properties/envVars/items/anyOf/0/properties/previewValue"
                    }
                  }
                },
                {
                  "$id": "#/properties/envVars/items/anyOf/1",
                  "type": "object",
                  "examples": [
                    {
                      "key": "DATABASE_URL",
                      "fromDatabase": {
                        "name": "prod",
                        "property": "connectionString"
                      }
                    }
                  ],
                  "required": [
                    "key",
                    "fromDatabase"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$id": "#/properties/envVars/items/anyOf/1/properties/key",
                      "type": "string"
                    },
                    "fromDatabase": {
                      "$id": "#/properties/envVars/items/anyOf/1/properties/fromDatabase",
                      "type": "object",
                      "required": [
                        "name",
                        "property"
                      ],
                      "additionalProperties": false,
                      "properties": {
                        "name": {
                          "$id": "#/properties/envVars/items/anyOf/1/properties/fromDatabase/properties/name",
                          "type": "string"
                        },
                        "property": {
                          "$id": "#/properties/envVars/items/anyOf/1/properties/fromDatabase/properties/property",
                          "type": "string",
                          "enum": [
                            "host",
                            "port",
                            "database",
                            "user",
                            "password",
                            "connectionString"
                          ]
                        }
                      }
                    },
                    "previewValue": {
                      "$id": "#/properties/envVars/items/anyOf/1/properties/previewValue"
                    }
                  }
                },
                {
                  "$id": "#/properties/envVars/items/anyOf/2",
                  "type": "object",
                  "examples": [
                    {
                      "key": "REDIS_HOST",
                      "fromService": {
                        "name": "redis",
                        "type": "pserv",
                        "property": "host"
                      }
                    }
                  ],
                  "required": [
                    "key",
                    "fromService"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$id": "#/properties/envVars/items/anyOf/2/properties/key",
                      "type": "string"
                    },
                    "fromService": {
                      "$id": "#/properties/envVars/items/anyOf/2/properties/fromService",
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "name",
                            "type",
                            "property"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "web",
                                "worker",
                                "pserv",
                                "cron"
                              ]
                            },
                            "property": {
                              "type": "string",
                              "enum": [
                                "host",
                                "port",
                                "hostport"
                              ]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "name",
                            "type",
                            "envVarKey"
                          ],
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "web",
                                "worker",
                                "pserv",
                                "cron"
                              ]
                            },
                            "envVarKey": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "previewValue": {
                      "$id": "#/properties/envVars/items/anyOf/2/properties/previewValue"
                    }
                  }
                },
                {
                  "$id": "#/properties/envVars/items/anyOf/3",
                  "type": "object",
                  "examples": [
                    {
                      "key": "APP_SECRET",
                      "generateValue": true
                    }
                  ],
                  "required": [
                    "key",
                    "generateValue"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$id": "#/properties/envVars/items/anyOf/3/properties/key",
                      "type": "string"
                    },
                    "generateValue": {
                      "$id": "#/properties/envVars/items/anyOf/3/properties/generateValue",
                      "type": "boolean"
                    },
                    "previewValue": {
                      "$id": "#/properties/envVars/items/anyOf/3/properties/previewValue"
                    }
                  }
                },
                {
                  "$id": "#/properties/envVars/items/anyOf/4",
                  "type": "object",
                  "examples": [
                    {
                      "key": "SOME_SECRET",
                      "sync": false
                    }
                  ],
                  "required": [
                    "key",
                    "sync"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "$id": "#/properties/envVars/items/anyOf/4/properties/key",
                      "type": "string"
                    },
                    "sync": {
                      "$id": "#/properties/envVars/items/anyOf/4/properties/sync",
                      "type": "boolean",
                      "default": false
                    },
                    "previewValue": {
                      "$id": "#/properties/envVars/items/anyOf/4/properties/previewValue"
                    }
                  }
                },
                {
                  "$id": "#/properties/envVars/items/anyOf/5",
                  "type": "object",
                  "title": "The sixth anyOf schema",
                  "description": "An explanation about the purpose of this instance.",
                  "default": {},
                  "examples": [
                    {
                      "fromGroup": "my-env-group"
                    }
                  ],
                  "required": [
                    "fromGroup"
                  ],
                  "properties": {
                    "fromGroup": {
                      "$id": "#/properties/envVars/items/anyOf/5/properties/fromGroup",
                      "type": "string",
                      "title": "The fromGroup schema",
                      "description": "An explanation about the purpose of this instance.",
                      "default": "",
                      "examples": [
                        "my-env-group"
                      ]
                    }
                  },
                  "additionalProperties": true
                }
              ]
            }
          },
          "disk": {
            "$comment": "not valid for static env",
            "type": "object",
            "required": [
              "name",
              "mountPath"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "mountPath": {
                "type": "string"
              },
              "sizeGB": {
                "type": "integer"
              }
            }
          },
          "dockerCommand": {
            "$comment": "for docker env only",
            "type": "string"
          },
          "dockerContext": {
            "$comment": "for docker env only",
            "type": "string"
          },
          "dockerfilePath": {
            "$comment": "for docker env only",
            "type": "string"
          },
          "domains": {
            "$comment": "for web type only",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headers": {
            "$comment": "only for static env",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "path",
                "name",
                "value"
              ],
              "properties": {
                "path": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "maxmemoryPolicy": {
            "$comment": "for redis type only",
            "type": "string",
            "default": "allkeys-lru",
            "enum": [
              "noeviction",
              "volatile-lru",
              "volatile-lfu",
              "allkeys-lfu",
              "volatile-random",
              "allkeys-random",
              "volatile-ttl"
            ]
          },
          "healthCheckPath": {
            "type": "string"
          },
          "numInstances": {
            "type": "integer",
            "default": 1
          },
          "plan": {
            "type": "string",
            "enum": [
              "free",
              "starter",
              "starter plus",
              "standard",
              "standard plus",
              "pro",
              "pro plus"
            ]
          },
          "previewPlan": {
            "$comment": "Is this deprecated? It is not mentioned in docs.",
            "type": "string",
            "enum": [
              "starter",
              "starter plus",
              "standard",
              "standard plus",
              "pro",
              "pro plus"
            ]
          },
          "pullRequestPreviewsEnabled": {
            "$comment": "only for web type",
            "type": "boolean"
          },
          "routes": {
            "$comment": "only for static env",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type",
                "source",
                "destination"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "redirect",
                    "rewrite"
                  ]
                },
                "source": {
                  "type": "string"
                },
                "destination": {
                  "type": "string"
                }
              }
            }
          },
          "scaling": {
            "type": "object",
            "properties": {
              "minInstances": {
                "type": "integer"
              },
              "maxInstances": {
                "type": "integer"
              },
              "targetMemoryPercent": {
                "type": "integer"
              },
              "targetCPUPercent": {
                "type": "integer"
              }
            }
          },
          "schedule": {
            "$comment": "only for cron type",
            "type": "string"
          },
          "startCommand": {
            "type": "string"
          },
          "staticPublishPath": {
            "type": "string"
          },
          "ipAllowList": {
            "$comment": "only for Redis",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "source",
                "description"
              ],
              "additionalProperties": false,
              "properties": {
                "source": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        },
        "allOf": [
          {
            "$comment": "Conditionally disallow certain properties"
          },
          {
            "$comment": "Disallow docker-related commands unless `env` is `docker`.",
            "if": {
              "not": {
                "properties": {
                  "env": {
                    "const": "docker"
                  }
                }
              }
            },
            "then": {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "dockerCommand"
                    ]
                  },
                  {
                    "required": [
                      "dockerContext"
                    ]
                  },
                  {
                    "required": [
                      "dockerfilePath"
                    ]
                  }
                ]
              }
            }
          },
          {
            "$comment": "Disallow `domains` unless `type` is `web`.",
            "if": {
              "not": {
                "properties": {
                  "type": {
                    "const": "web"
                  }
                }
              }
            },
            "then": {
              "not": {
                "required": [
                  "domains"
                ]
              }
            }
          },
          {
            "if": {
              "not": {
                "properties": {
                  "env": {
                    "const": "static"
                  }
                }
              }
            },
            "then": {
              "$comment": "Disallow `routes` and `headers` unless `env` is `static`.",
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "routes"
                    ]
                  },
                  {
                    "required": [
                      "headers"
                    ]
                  },
                  {
                    "required": [
                      "staticPublishPath"
                    ]
                  }
                ]
              }
            }
          },
          {
            "$comment": "Disallow `disk` if `env` is `static`.",
            "if": {
              "properties": {
                "env": {
                  "const": "static"
                }
              }
            },
            "then": {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "disk"
                    ]
                  },
                  {
                    "required": [
                      "region"
                    ]
                  }
                ]
              }
            }
          },
          {
            "$comment": "Disallow `maxmemoryPolicy` unless `type` is `redis`.",
            "if": {
              "not": {
                "properties": {
                  "type": {
                    "const": "redis"
                  }
                }
              }
            },
            "then": {
              "not": {
                "required": [
                  "maxmemoryPolicy"
                ]
              }
            }
          },
          {
            "$comment": "Require `env` property if `type` is not `redis`.",
            "if": {
              "not": {
                "properties": {
                  "type": {
                    "const": "redis"
                  }
                }
              }
            },
            "then": {
              "required": [
                "env"
              ]
            }
          },
          {
            "$comment": "Disallow `schedule` unless `type` is `cron`.",
            "if": {
              "not": {
                "properties": {
                  "type": {
                    "const": "cron"
                  }
                }
              }
            },
            "then": {
              "not": {
                "required": [
                  "schedule"
                ]
              }
            }
          },
          {
            "$comment": "Disallow `ipAllowList` unless `type` is `redis`.",
            "if": {
              "not": {
                "properties": {
                  "type": {
                    "const": "redis"
                  }
                }
              }
            },
            "then": {
              "not": {
                "required": [
                  "ipAllowList"
                ]
              }
            }
          }
        ]
      },
      "definitions": {
        "docker": {
          "$comment": "Disallow docker-related commands unless `env` is `docker`.",
          "if": {
            "not": {
              "properties": {
                "env": {
                  "const": "docker"
                }
              }
            }
          },
          "then": {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "dockerCommand"
                  ]
                },
                {
                  "required": [
                    "dockerContext"
                  ]
                },
                {
                  "required": [
                    "dockerfilePath"
                  ]
                }
              ]
            }
          }
        },
        "domains": {
          "$comment": "Disallow `domains` unless `type` is `web`.",
          "if": {
            "not": {
              "properties": {
                "type": {
                  "const": "web"
                }
              }
            }
          },
          "then": {
            "not": {
              "required": [
                "domains"
              ]
            }
          }
        },
        "not-static": {
          "if": {
            "not": {
              "properties": {
                "env": {
                  "const": "static"
                }
              }
            }
          },
          "then": {
            "$comment": "Disallow `routes` and `headers` unless `env` is `static`.",
            "not": {
              "anyOf": [
                {
                  "required": [
                    "routes"
                  ]
                },
                {
                  "required": [
                    "headers"
                  ]
                },
                {
                  "required": [
                    "staticPublishPath"
                  ]
                }
              ]
            }
          }
        },
        "static": {
          "$comment": "Disallow `disk` if `env` is `static`.",
          "if": {
            "properties": {
              "env": {
                "const": "static"
              }
            }
          },
          "then": {
            "not": {
              "anyOf": [
                {
                  "required": [
                    "disk"
                  ]
                },
                {
                  "required": [
                    "region"
                  ]
                }
              ]
            }
          }
        },
        "redis-maxmem": {
          "$comment": "Disallow `maxmemoryPolicy` unless `type` is `redis`.",
          "if": {
            "not": {
              "properties": {
                "type": {
                  "const": "redis"
                }
              }
            }
          },
          "then": {
            "not": {
              "required": [
                "maxmemoryPolicy"
              ]
            }
          }
        },
        "redis-no-env": {
          "$comment": "Require `env` property if `type` is not `redis`.",
          "if": {
            "not": {
              "properties": {
                "type": {
                  "const": "redis"
                }
              }
            }
          },
          "then": {
            "required": [
              "env"
            ]
          }
        },
        "cron": {
          "$comment": "Disallow `schedule` unless `type` is `cron`.",
          "if": {
            "not": {
              "properties": {
                "type": {
                  "const": "cron"
                }
              }
            }
          },
          "then": {
            "not": {
              "required": [
                "schedule"
              ]
            }
          }
        },
        "ipallowlist": {
          "$comment": "Disallow `ipAllowList` unless `type` is `redis`.",
          "if": {
            "not": {
              "properties": {
                "type": {
                  "const": "redis"
                }
              }
            }
          },
          "then": {
            "not": {
              "required": [
                "ipAllowList"
              ]
            }
          }
        }
      }
    },
    "databases": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "$id": "subschemas/databases.json",
      "type": "array",
      "title": "The databases schema",
      "description": "An explanation about the purpose of this instance.",
      "default": [],
      "items": {
        "$id": "#/properties/databases/items",
        "type": "object",
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "region": {
            "type": "string",
            "default": "oregon",
            "enum": [
              "frankfurt",
              "oregon",
              "ohio",
              "singapore"
            ]
          },
          "plan": {
            "type": "string",
            "default": "starter",
            "enum": [
              "starter",
              "standard",
              "standard plus",
              "pro",
              "pro plus"
            ]
          },
          "previewPlan": {
            "$comment": "Is this deprecated? It is not mentioned in docs.",
            "type": "string",
            "enum": [
              "starter",
              "standard",
              "standard plus",
              "pro",
              "pro plus"
            ]
          },
          "databaseName": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "ipAllowList": {
            "$comment": "What should the `default` value be? `null`? `[]` disallows all external IPs according to docs.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "source",
                "description"
              ],
              "additionalProperties": false,
              "properties": {
                "source": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          },
          "postgresMajorVersion": {
            "type": "integer",
            "enum": [
              11,
              12,
              13
            ]
          }
        }
      }
    },
    "envVarGroups": {
      "$schema": "http://json-schema.org/draft-07/schema",
      "$id": "subschemas/envVarGroups.json",
      "type": "array",
      "title": "The envVarGroups schema",
      "description": "An explanation about the purpose of this instance.",
      "default": [],
      "items": {
        "$id": "#/properties/envVarGroups/items",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "envVars": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "examples": [
                    {
                      "key": "A",
                      "value": "B"
                    }
                  ],
                  "required": [
                    "key",
                    "value"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {},
                    "previewValue": {}
                  }
                },
                {
                  "type": "object",
                  "examples": [
                    {
                      "key": "APP_SECRET",
                      "generateValue": true
                    }
                  ],
                  "required": [
                    "key",
                    "generateValue"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "generateValue": {
                      "type": "boolean"
                    },
                    "previewValue": {}
                  }
                },
                {
                  "type": "object",
                  "examples": [
                    {
                      "key": "SOME_SECRET",
                      "sync": false
                    }
                  ],
                  "required": [
                    "key",
                    "sync"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "sync": {
                      "type": "boolean",
                      "default": false
                    },
                    "previewValue": {}
                  }
                }
              ]
            }
          }
        }
      }
    }
  }
}